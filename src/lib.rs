mod polyequal;
pub use crate::polyequal::polyline_equal;

pub fn add(left: usize, right: usize) -> usize {
    left + right
}

#[cfg(test)]
mod tests {
    use polysplit::euclidean::Point;
    use crate::polyequal::polyline_equal;

    #[test]
    fn test_example00() {
        let a = vec![(100.0, 80.0), (320.0, 80.0), (540.0, 120.0)];
        let b = vec![(20.0, 160.0), (120.0, 160.0), (220.0, 140.0), (360.0, 180.0), (460.0, 160.0)];

        let p_a: Vec<_> = a.iter().map(|p| Point(p.0, p.1)).collect();
        let p_b: Vec<_> = b.iter().map(|p| Point(p.0, p.1)).collect();

        assert_eq!(polyline_equal(&p_a, &p_b, 200.0), true);
        // assert_eq!(polyline_equal(&p_a, &p_b, 10.0), false);
    }

    #[test]
    fn test_example01() {
        let a = vec![(20.0, 20.0), (80.0, 40.0), (160.0, 80.0), (240.0, 60.0), (300.0, 60.0), (360.0, 100.0), (440.0, 100.0), (500.0, 80.0), (560.0, 60.0), (620.0, 60.0), (660.0, 100.0), (720.0, 100.0), (780.0, 80.0), (840.0, 60.0)];
        let b = vec![(40.0, 40.0), (80.0, 20.0), (140.0, 40.0), (200.0, 80.0), (260.0, 60.0), (340.0, 60.0), (340.0, 100.0), (400.0, 80.0), (480.0, 100.0), (520.0, 60.0), (600.0, 40.0), (680.0, 100.0), (740.0, 60.0), (860.0, 40.0)];

        let p_a: Vec<_> = a.iter().map(|p| Point(p.0, p.1)).collect();
        let p_b: Vec<_> = b.iter().map(|p| Point(p.0, p.1)).collect();

        assert_eq!(polyline_equal(&p_a, &p_b, 35.0), true);
        assert_eq!(polyline_equal(&p_a, &p_b, 10.0), false);
    }

    #[test]
    fn test_example02() {
        let a = vec![(40.0, 60.0), (140.0, 60.0), (160.0, 100.0), (220.0, 120.0), (280.0, 100.0), (320.0, 80.0), (420.0, 60.0), (440.0, 120.0), (500.0, 160.0), (540.0, 140.0), (580.0, 120.0), (640.0, 80.0), (720.0, 100.0), (760.0, 160.0), (860.0, 140.0), (980.0, 120.0), (1080.0, 80.0), (1080.0, 40.0)];
        let b = vec![(60.0, 40.0), (160.0, 60.0), (200.0, 100.0), (260.0, 80.0), (340.0, 60.0), (380.0, 80.0), (440.0, 80.0), (500.0, 120.0), (520.0, 160.0), (580.0, 140.0), (640.0, 100.0), (680.0, 100.0), (720.0, 140.0), (780.0, 140.0), (800.0, 160.0), (840.0, 140.0), (880.0, 120.0), (920.0, 140.0), (940.0, 100.0), (1000.0, 100.0), (1040.0, 100.0), (1100.0, 60.0), (1080.0, 40.0)];

        let p_a: Vec<_> = a.iter().map(|p| Point(p.0, p.1)).collect();
        let p_b: Vec<_> = b.iter().map(|p| Point(p.0, p.1)).collect();

        assert_eq!(polyline_equal(&p_a, &p_b, 35.0), true);
        assert_eq!(polyline_equal(&p_a, &p_b, 10.0), false);
    }

    // #[test]
    // fn test_example03() {
    //     let a = vec![(20.0, 20.0), (80.0, 60.0), (140.0, 100.0), (180.0, 120.0), (220.0, 160.0), (260.0, 200.0), (300.0, 240.0), (340.0, 220.0), (360.0, 200.0), (400.0, 160.0), (420.0, 120.0), (480.0, 100.0), (500.0, 120.0), (560.0, 120.0), (620.0, 120.0), (720.0, 100.0), (780.0, 100.0), (840.0, 80.0), (860.0, 120.0)];
    //     let b = vec![(40.0, 60.0), (100.0, 40.0), (120.0, 60.0), (160.0, 80.0), (200.0, 120.0), (240.0, 120.0), (280.0, 140.0), (320.0, 140.0), (340.0, 140.0), (400.0, 120.0), (420.0, 100.0), (460.0, 80.0), (500.0, 100.0), (540.0, 120.0), (580.0, 140.0), (640.0, 120.0), (660.0, 100.0), (720.0, 80.0), (740.0, 80.0), (800.0, 100.0), (840.0, 100.0)];

    //     let p_a: Vec<_> = a.iter().map(|p| Point(p.0, p.1)).collect();
    //     let p_b: Vec<_> = b.iter().map(|p| Point(p.0, p.1)).collect();

    //     assert_eq!(polyline_equal(&p_a, &p_b, 35.0), false);
    //     assert_eq!(polyline_equal(&p_a, &p_b, 10.0), false);
    // }
}
